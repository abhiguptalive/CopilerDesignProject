Mini Project Title: SLR Parsing

 Author:

Abhishek Kumar Gupta (1PI12IS002)


Implementation: Using Python Programming Language

Samle Input/Output:

Input1:

test.txt

E: E + T
E: T
T: T * F
T: F
F: ( E )
F: id


Sample Input/Output1:

abhi@da-Inspiron-5521:~$ python3 SLR.py test.txt
Grammer list: ['S1: E $', 'E: E + T', 'E: T', 'T: T * F', 'T: F', 'F: ( E )', 'F: id']
Terminal and nonterminal: ['id', ')', '(', '*', '+', '$', 'E', 'T', 'F']
States:
I0:  ['S1: E $', 'E: E + T', 'E: T', 'T: T * F', 'T: F', 'F: ( E )', 'F: id']
I1:  ['F:  /6']
I2:  ['F: E ) /5', 'E: E + T', 'E: T', 'T: T * F', 'T: F', 'F: ( E )', 'F: id']
I3:  ['S1: $ /0', 'E: + T /1']
I4:  ['E:  /2', 'T: * F /3']
I5:  ['T:  /4']
I6:  ['F: ) /5', 'E: + T /1']
I7:  ['E: T /1', 'T: T * F', 'T: F', 'F: ( E )', 'F: id']
I8:  ['T: F /3', 'F: ( E )', 'F: id']
I9:  ['F: /5']
I10:  ['E: /1', 'T: * F /3']
I11:  ['T: /3']


Parsing Table:
		id 	) 	( 	* 	+ 	$ 	E 	T 	F 	
*****************************************************************************************

0	|	s1 	 	s2 	 	 	 	3 	4 	5 	
-------------------------------------------------------------------------------------
1	|	r6 	r6 	r6 	r6 	r6 	r6 	 	 	 	
-------------------------------------------------------------------------------------
2	|	s1 	 	s2 	 	 	 	6 	4 	5 	
-------------------------------------------------------------------------------------
3	|	 	 	 	 	s7 	accept 	 	 	 	
-------------------------------------------------------------------------------------
4	|	r2 	r2 	r2 	s8 	r2 	r2 	 	 	 	
-------------------------------------------------------------------------------------
5	|	r4 	r4 	r4 	r4 	r4 	r4 	 	 	 	
-------------------------------------------------------------------------------------
6	|	 	s9 	 	 	s7 	 	 	 	 	
-------------------------------------------------------------------------------------
7	|	s1 	 	s2 	 	 	 	 	10 	5 	
-------------------------------------------------------------------------------------
8	|	s1 	 	s2 	 	 	 	 	 	11 	
-------------------------------------------------------------------------------------
9	|	r5 	r5 	r5 	r5 	r5 	r5 	 	 	 	
-------------------------------------------------------------------------------------
10	|	r1 	r1 	r1 	s8 	r1 	r1 	 	 	 	
-------------------------------------------------------------------------------------
11	|	r3 	r3 	r3 	r3 	r3 	r3 	 	 	 	
-------------------------------------------------------------------------------------
Enter string to be parsed (Leave space between each term (Ex: id * id)):id + id * id
SLR Parsing successful. Valid input.




Sample Input/Output2:



abhi@da-Inspiron-5521:~$ python3 SLR.py test.txt
Grammer list: ['S1: E $', 'E: E + T', 'E: T', 'T: T * F', 'T: F', 'F: ( E )', 'F: id']
Terminal and nonterminal: ['id', ')', '(', '*', '+', '$', 'E', 'T', 'F']
States:
I0:  ['S1: E $', 'E: E + T', 'E: T', 'T: T * F', 'T: F', 'F: ( E )', 'F: id']
I1:  ['F:  /6']
I2:  ['F: E ) /5', 'E: E + T', 'E: T', 'T: T * F', 'T: F', 'F: ( E )', 'F: id']
I3:  ['S1: $ /0', 'E: + T /1']
I4:  ['E:  /2', 'T: * F /3']
I5:  ['T:  /4']
I6:  ['F: ) /5', 'E: + T /1']
I7:  ['E: T /1', 'T: T * F', 'T: F', 'F: ( E )', 'F: id']
I8:  ['T: F /3', 'F: ( E )', 'F: id']
I9:  ['F: /5']
I10:  ['E: /1', 'T: * F /3']
I11:  ['T: /3']


Parsing Table:
		id 	) 	( 	* 	+ 	$ 	E 	T 	F 	
*****************************************************************************************

0	|	s1 	 	s2 	 	 	 	3 	4 	5 	
-------------------------------------------------------------------------------------
1	|	r6 	r6 	r6 	r6 	r6 	r6 	 	 	 	
-------------------------------------------------------------------------------------
2	|	s1 	 	s2 	 	 	 	6 	4 	5 	
-------------------------------------------------------------------------------------
3	|	 	 	 	 	s7 	accept 	 	 	 	
-------------------------------------------------------------------------------------
4	|	r2 	r2 	r2 	s8 	r2 	r2 	 	 	 	
-------------------------------------------------------------------------------------
5	|	r4 	r4 	r4 	r4 	r4 	r4 	 	 	 	
-------------------------------------------------------------------------------------
6	|	 	s9 	 	 	s7 	 	 	 	 	
-------------------------------------------------------------------------------------
7	|	s1 	 	s2 	 	 	 	 	10 	5 	
-------------------------------------------------------------------------------------
8	|	s1 	 	s2 	 	 	 	 	 	11 	
-------------------------------------------------------------------------------------
9	|	r5 	r5 	r5 	r5 	r5 	r5 	 	 	 	
-------------------------------------------------------------------------------------
10	|	r1 	r1 	r1 	s8 	r1 	r1 	 	 	 	
-------------------------------------------------------------------------------------
11	|	r3 	r3 	r3 	r3 	r3 	r3 	 	 	 	
-------------------------------------------------------------------------------------
Enter string to be parsed (Leave space between each term (Ex: id * id)):id + id * (
Invalid input. SLR parsing failed



Input2:

test2.txt

S: a A
S: b B
A: S a
A: C a
B: b S
B: c
C: c B



Sample Input/Output3:

abhi@da-Inspiron-5521:~$ python3 SLR.py test2.txt
Grammer list: ['S1: S $', 'S: a A', 'S: b B', 'A: S a', 'A: C a', 'B: b S', 'B: c', 'C: c B']
Terminal and nonterminal: ['c', 'b', 'a', '$', 'S', 'A', 'B', 'C']
States:
I0:  ['S1: S $', 'S: a A', 'S: b B']
I1:  ['S: B /2', 'B: b S', 'B: c']
I2:  ['S: A /1', 'A: S a', 'A: C a', 'C: c B']
I3:  ['S1: $ /0']
I4:  ['B:  /6']
I5:  ['B: S /5', 'S: a A', 'S: b B']
I6:  ['S: /2']
I7:  ['C: B /7', 'B: b S', 'B: c']
I8:  ['A: a /3']
I9:  ['S: /1']
I10:  ['A: a /4']
I11:  ['B: /5']
I12:  ['C: /7']
I13:  ['A: /3']
I14:  ['A: /4']


Parsing Table:
		c 	b 	a 	$ 	S 	A 	B 	C 	
*****************************************************************************************

0	|	 	s1 	s2 	 	3 	 	 	 	
-------------------------------------------------------------------------------------
1	|	s4 	s5 	 	 	 	 	6 	 	
-------------------------------------------------------------------------------------
2	|	s7 	 	 	 	8 	9 	 	10 	
-------------------------------------------------------------------------------------
3	|	 	 	 	accept 	 	 	 	 	
-------------------------------------------------------------------------------------
4	|	r6 	r6 	r6 	r6 	 	 	 	 	
-------------------------------------------------------------------------------------
5	|	 	s1 	s2 	 	11 	 	 	 	
-------------------------------------------------------------------------------------
6	|	r2 	r2 	r2 	r2 	 	 	 	 	
-------------------------------------------------------------------------------------
7	|	s4 	s5 	 	 	 	 	12 	 	
-------------------------------------------------------------------------------------
8	|	 	 	s13 	 	 	 	 	 	
-------------------------------------------------------------------------------------
9	|	r1 	r1 	r1 	r1 	 	 	 	 	
-------------------------------------------------------------------------------------
10	|	 	 	s14 	 	 	 	 	 	
-------------------------------------------------------------------------------------
11	|	r5 	r5 	r5 	r5 	 	 	 	 	
-------------------------------------------------------------------------------------
12	|	r7 	r7 	r7 	r7 	 	 	 	 	
-------------------------------------------------------------------------------------
13	|	r3 	r3 	r3 	r3 	 	 	 	 	
-------------------------------------------------------------------------------------
14	|	r4 	r4 	r4 	r4 	 	 	 	 	
-------------------------------------------------------------------------------------
Enter string to be parsed (Leave space between each term (Ex: id * id)):b c

SLR Parsing successful. Valid input.


Sample Input/Output4:



abhi@da-Inspiron-5521:~$ python3 SLR.py test2.txt
Grammer list: ['S1: S $', 'S: a A', 'S: b B', 'A: S a', 'A: C a', 'B: b S', 'B: c', 'C: c B']
Terminal and nonterminal: ['c', 'b', 'a', '$', 'S', 'A', 'B', 'C']
States:
I0:  ['S1: S $', 'S: a A', 'S: b B']
I1:  ['S: B /2', 'B: b S', 'B: c']
I2:  ['S: A /1', 'A: S a', 'A: C a', 'C: c B']
I3:  ['S1: $ /0']
I4:  ['B:  /6']
I5:  ['B: S /5', 'S: a A', 'S: b B']
I6:  ['S: /2']
I7:  ['C: B /7', 'B: b S', 'B: c']
I8:  ['A: a /3']
I9:  ['S: /1']
I10:  ['A: a /4']
I11:  ['B: /5']
I12:  ['C: /7']
I13:  ['A: /3']
I14:  ['A: /4']


Parsing Table:
		c 	b 	a 	$ 	S 	A 	B 	C 	
*****************************************************************************************

0	|	 	s1 	s2 	 	3 	 	 	 	
-------------------------------------------------------------------------------------
1	|	s4 	s5 	 	 	 	 	6 	 	
-------------------------------------------------------------------------------------
2	|	s7 	 	 	 	8 	9 	 	10 	
-------------------------------------------------------------------------------------
3	|	 	 	 	accept 	 	 	 	 	
-------------------------------------------------------------------------------------
4	|	r6 	r6 	r6 	r6 	 	 	 	 	
-------------------------------------------------------------------------------------
5	|	 	s1 	s2 	 	11 	 	 	 	
-------------------------------------------------------------------------------------
6	|	r2 	r2 	r2 	r2 	 	 	 	 	
-------------------------------------------------------------------------------------
7	|	s4 	s5 	 	 	 	 	12 	 	
-------------------------------------------------------------------------------------
8	|	 	 	s13 	 	 	 	 	 	
-------------------------------------------------------------------------------------
9	|	r1 	r1 	r1 	r1 	 	 	 	 	
-------------------------------------------------------------------------------------
10	|	 	 	s14 	 	 	 	 	 	
-------------------------------------------------------------------------------------
11	|	r5 	r5 	r5 	r5 	 	 	 	 	
-------------------------------------------------------------------------------------
12	|	r7 	r7 	r7 	r7 	 	 	 	 	
-------------------------------------------------------------------------------------
13	|	r3 	r3 	r3 	r3 	 	 	 	 	
-------------------------------------------------------------------------------------
14	|	r4 	r4 	r4 	r4 	 	 	 	 	
-------------------------------------------------------------------------------------
Enter string to be parsed (Leave space between each term (Ex: id * id)):a b a
Invalid input. SLR parsing failed


